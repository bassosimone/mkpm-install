commit f5fbecb3e5ce145243c30b55beb74b5fcfb0c771
Author: Simone Basso <bassosimone@gmail.com>
Date:   Thu Dec 24 20:29:01 2015 +0100

    Minimal changes to use Tor as a library

    Specifically, it helps a lot to have a function called when the
    event loop is started, because we can retrieve tor event_base and
    run as a callback inside tor own's event loop.

diff --git a/src/or/main.c b/src/or/main.c
index 0ab8f10..2a1a12a 100644
--- a/src/or/main.c
+++ b/src/or/main.c
@@ -2482,6 +2482,13 @@ do_main_loop(void)
   return run_main_loop_until_done();
 }
 
+static volatile int should_break = 0;
+
+void tor_break_loop(void) {
+    event_base_loopbreak(tor_libevent_get_base());
+    should_break = 1;
+}
+
 /**
  * Run the main loop a single time. Return 0 for "exit"; -1 for "exit with
  * error", and 1 for "run this again."
@@ -2510,6 +2517,11 @@ run_main_loop_once(void)
   loop_result = event_base_loop(tor_libevent_get_base(),
                                 called_loop_once ? EVLOOP_ONCE : 0);
 
+  if (should_break) {
+    should_break = 0;
+    return 0;
+  }
+
   /* let catch() handle things like ^c, and otherwise don't worry about it */
   if (loop_result < 0) {
     int e = tor_socket_errno(-1);
@@ -2543,6 +2555,14 @@ run_main_loop_once(void)
   return 1;
 }
 
+static void (*running_cb)(void *) = NULL;
+static void *running_arg = NULL;
+
+void tor_on_started(void (*callback)(void *), void *opaque) {
+  running_cb = callback;
+  running_arg = opaque;
+}
+
 /** Run the run_main_loop_once() function until it declares itself done,
  * and return its final return value.
  *
@@ -2551,6 +2571,9 @@ run_main_loop_once(void)
 static int
 run_main_loop_until_done(void)
 {
+  if (running_cb != NULL) {
+    running_cb(running_arg);
+  }
   int loop_result = 1;
   do {
     loop_result = run_main_loop_once();
