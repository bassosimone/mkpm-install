#!/bin/sh -e
# Part of measurement-kit <https://measurement-kit.github.io/>.
# Measurement-kit is free software. See AUTHORS and LICENSE for more
# information on the copying conditions.

if [ "$mkpm_debug" ]; then
    set -x
fi

mkpm_root=`pwd`/mkpm_modules
mkpm_spec_repo=https://raw.githubusercontent.com/bassosimone/mkpm-install
mkpm_spec_branch=master

pkg_clone() {
    cd $mkpm_root/src
    rm -rf $pkg_name
    git clone --depth=4 --branch=$pkg_branch $pkg_repo
}

pkg_configure() {
    cd $mkpm_root/src/$pkg_name
    if [ -x autogen.sh ]; then
        ./autogen.sh
    elif [ -f configure.ac -o -f configure.in ]; then
        autoreconf -i
    fi
    if [ -x configure ]; then
        ./configure --prefix=$mkpm_root/dist $mkpm_configure_flags
    fi
}

pkg_make() {
    cd $mkpm_root/src/$pkg_name
    if [ -f Makefile ]; then
        make $mkpm_make_flags
    fi
}

pkg_install() {
    cd $mkpm_root/src/$pkg_name
    if [ -f Makefile ]; then
        make install $mkpm_make_flags
    fi
}

mkpm_get_resource() {
    install -d $mkpm_root/`dirname $1`
    if [ ! -f $mkpm_root/$1 ]; then
        curl -#o $mkpm_root/$1 $mkpm_spec_repo/$mkpm_spec_branch/mkpm_modules/$1
    fi
}
mkpm_apply_patch() {
    mkpm_get_resource $1
    git apply $mkpm_root/$1
}
mkpm_install_resource() {
    mkpm_get_resource $1
    install $mkpm_root/$1 $2
}

if [ $# -ne 1 ]; then
    echo "usage: $0 package"
    exit 0
fi

install -d $mkpm_root
install -d $mkpm_root/src
install -d $mkpm_root/dist

# This used to be a larger script relying on subshells and `set -e` to
# catch and handle errors, but turned out to be non-portable, hence the
# implementation has been splitted in multiple scripts.
#
# The objective of this script is to build *just one* package, eventually
# modifying the environment, possibly dying on error (set -e), and discarding
# any changes made to environment on exit.
#
# Hopefully this would be enough to plase travis.
#
#    - Written by a very frustrated Simone on 2016-01-06.

echo "= $1"

# Allow ./configure to find what we've compiled
export CPPFLAGS="$CPPFLAGS -I$mkpm_root/dist/include"
export LDFLAGS="$LDFLAGS -L$mkpm_root/dist/lib"

# Provide default CC and CXX
if [ -z "$CC" ]; then
    export CC="cc"
fi
if [ -z "$CXX" ]; then
    export CXX="c++"
fi

echo "== source $1 spec =="
mkpm_get_resource pkg/$1/spec.sh
. $mkpm_root/pkg/$1/spec.sh
test -z "$pkg_branch" && pkg_branch=master

saved_pwd=`pwd`  # save directory

echo "== clone $1 =="
pkg_clone

cd $saved_pwd   # restore

echo "== configure $1 =="
pkg_configure

cd $saved_pwd   # restore

echo "== make $1 =="
pkg_make

cd $saved_pwd   # restore

echo "== install $1 =="
pkg_install

cd $saved_pwd   # restore
